<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Twister: User `${user}`</title>
	<meta name="author" content="Cristi Constantin">
	<meta name="description" content="Central Engine Users...">
	<!-- Le styles -->
	<link href="/static/css/bootstrap.css" rel="stylesheet">
	<style>
		body {
			padding-top: 60px;
			background: #f6f6f6 url(/static/img/bg.png) repeat fixed;
		}
		.hero-unit {
			font-size:14px;
			border: 1px solid #aaf;
		}
		.hero-unit h1 {
			margin-top: -25px;
			text-shadow: 0px 1px 3px #555;
		}
		.logs_content {
			font-size: 14px;
			font-family: Monospace, DejaVu Sans Mono, Courier New, Courier;
		}
	</style>
	<link rel="shortcut icon" href="/static/favicon.ico" />
</head>
<body>
<div class="container-fluid">

<ul class="pager" style="position:absolute;margin-top:-45px;"><li class="previous"><a href="/web">Back</a></li></ul>

<div class="tabbable">
	<ul class="nav nav-pills">
		<li class="active"><a href="#tab_home" data-toggle="tab"> <i class="icon-user"></i> Home </a></li>
		<li><a href="#tab_proc" data-toggle="tab"> <i class="icon-tasks"></i> Processes </a></li>
		<li><a href="#tab_logs" data-toggle="tab"> <i class="icon-th-list"></i> Logs </a></li>
	</ul>
	<div class="tab-content">

	<div class="tab-pane active" id="tab_home">
	<div class="hero-unit">
		<h1>User `${user}`</h1><br>
		<table class="table table-bordered">
			<tr><td width="200"><b>Status</b></td><td><span id="user_status">${status}</span>
				<small>(<a href="http://${host}/web/setUserStatus/${user}/2"><i class="icon-play"></i> start</a>&nbsp; |
				<a href="http://${host}/web/setUserStatus/${user}/0"><i class="icon-stop"></i> stop</a>&nbsp; |
				<a href="http://${host}/web/resetUser/${user}"><i class="icon-warning-sign"></i> reset!</a> )</small>
			</td></tr>
			<tr><td><b>Master config</b></td><td><span id="master_path"></span></td></tr>
			<tr><td><b>Project config</b></td><td><span id="project_path"></span></td></tr>
			<tr><td><b>DB config path</b></td><td><span id="db_config"></span></td></tr>
			<tr><td><b>E-mail config path</b></td><td><span id="eml_config"></span></td></tr>
			<tr><td><b>EPs file</b></td><td><span id="eps_file">${eps_file}</span></td></tr>
			<tr><td><b>Logs path</b></td><td><span id="logs_path"></span></td></tr>
			<tr><td><b>Tests path</b></td><td><span id="tests_path"></span></td></tr>
			<tr><td><b>User groups</b></td><td><span id="usr_groups"></span></td></tr>
			<tr><td><b>User roles</b></td><td><span id="usr_roles" style="color:gray"></span></td></tr>
		</table>
	</div>
	</div> <!-- End of tab-1 -->

<%
from datetime import datetime
from binascii import hexlify as encode
now = datetime.today()
diffs = []
if now.second < 59:
	now_str = now.replace(second=now.second+1).strftime('%Y-%m-%d %H:%M:%S')
else:
	now_str = now.replace(minute=now.minute+1, second=0).strftime('%Y-%m-%d %H:%M:%S')
act_eps = []
for ep in eps:
	tmp_now_str = eps[ep].get('last_seen_alive', now_str)
	diff_time = now - datetime.strptime(tmp_now_str, '%Y-%m-%d %H:%M:%S')
	diffs.append(diff_time.seconds)
	if eps[ep]['suites']:
		act_eps.append(ep)
%>

	<div class="tab-pane" id="tab_proc">
	<div class="hero-unit">
		<h1>Processes for `${user}`</h1><br>
		<div class="tabbable tabs-left">
		<ul class="nav nav-tabs">
		% for ep in eps:
			<li${' class="refresh_eps active"' if loop.first else ' class="refresh_eps"'}><a data-target="#${encode(ep)}" data-toggle="tab">
			<i class="${'icon-ok-sign' if diffs[loop.index] < 10 else 'icon-time'}"></i>
			% if ep_statuses[loop.index] == 'running':
			<i class="icon-play"></i>
			% elif ep_statuses[loop.index] == 'paused':
			<i class="icon-pause"></i>
			% else:
			<i class="icon-stop"></i>
			% endif
			<span>${ep}</span> </a></li>
		% endfor
		</ul>

		<div class="tab-content">
		% for ep in eps:
			<div class="tab-pane${' active' if loop.first else ''}" id="${encode(ep)}">
				<div class="well well-small" style="width:350px">
				Actions:&nbsp;<a href="/web/setEpStatus/${user}/${ep}/2"><i class="icon-play"></i> </a>&nbsp;|
				&nbsp; <a href="/web/setEpStatus/${user}/${ep}/1"><i class="icon-pause"></i> </a>&nbsp;|
				&nbsp; <a href="/web/setEpStatus/${user}/${ep}/0"><i class="icon-stop"></i> </a>&nbsp;|
				&nbsp; <a class="tree_edit" style="cursor:pointer"><i class="icon-pencil"></i> </a>
				</div>
				<!-- First file tree -->
				<div style="float:left;position:relative;width:300px;height:auto;margin-bottom:20px">
					<div id="t_${encode(ep)}" style="background:transparent"></div>
				</div>
				<!-- Second file tree -->
				<div style="float:right;position:relative;margin-right:100px;width:300px;height:auto;margin-bottom:20px">
					<div id="b_${encode(ep)}" style="background:transparent;visibility:hidden"></div>
				</div>
				<!-- Info about selected file or suite -->
				<div class="project_info" style="border:1px solid #aaf;margin-top:-40px;height:auto;clear:both;padding:5px">&nbsp;</div>
			</div>
		% endfor
		</div>
		</div> <!-- End of tabbable -->
	</div>
	</div> <!-- End of tab-2 -->

	<div class="tab-pane" id="tab_logs">
	<div class="hero-unit">
		<h1>Logs for `${user}`</h1><br>
		<div class="tabbable tabs-left">
		<ul class="nav nav-tabs">
		% for log in sorted(logs.keys()):
		% if log.lower() == 'logcli':
			% for ep in act_eps:
			<li${' class="refresh_logs active"' if loop.first else ' class="refresh_logs"'}><a data-target="#${log}_${encode(ep)}" data-toggle="tab">
			<i class="icon-th-list"></i> <span>${log} ${ep}</span> </a></li>
			% endfor
		% else:
			<li${' class="refresh_logs active"' if loop.first else ' class="refresh_logs"'}><a data-target="#${log}" data-toggle="tab">
			<i class="icon-th-list"></i> <span>${log}</span> </a></li>
		% endif
		% endfor
		</ul>

		<div class="tab-content logs_content">
		% for log in sorted(logs.keys()):
		% if log.lower() == 'logcli':
			% for ep in act_eps:
			<div class="tab-pane${' active' if loop.first else ''}" id="${log}_${encode(ep)}"></div>
			% endfor
		% else:
			<div class="tab-pane${' active' if loop.first else ''}" id="${log}"></div>
		% endif
		% endfor
		</div>
		</div> <!-- End of logs tabbable -->
	</div>
	</div> <!-- End of tab-3 -->

	</div> <!-- End of tab-content -->
</div> <!-- End of tabbable -->
</div>

<script src="/static/js/jquery.min.js"></script>
<script src="/static/js/jquery.cookie.js"></script>
<script src="/static/js/jquery.hotkeys.js"></script>
<script src="/static/js/bootstrap.min.js"></script>
<script src="/static/js/jquery.jstree.js"></script>

<script type="text/javascript">
var can_edit = false;

// User stats
function updateUserStats() {
	var refresh_int = 1500; // update every X ms
	var status_dict = ${exec_status};
	//var updt_usr = function() {
		$.getJSON("/web/json_get_project",
			// On success, execute the following :
			function(jdata) {
				$("span#user_status").text(status_dict[ jdata["${user}"]["status"] ]); // User status
				$("span#master_path").text(jdata["${user}"]["config_path"]);   // User master config
				$("span#project_path").text(jdata["${user}"]["project_path"]); // User project config
				$("span#db_config").text(jdata["${user}"]["db_config"]);       // Database config
				$("span#eml_config").text(jdata["${user}"]["eml_config"]);     // E-mail config
				$("span#logs_path").text(jdata["${user}"]["logs_path"]);       // User logs
				$("span#tests_path").text(jdata["${user}"]["tests_path"]);     // User logs
				$("span#usr_groups").text(jdata["${user}"]["user_groups"]);    // Groups
				$("span#usr_roles").text(jdata["${user}"]["user_roles"]);      // Roles
			});
		// setTimeout(updt_usr, refresh_int); // Thread
	//}
	// setTimeout(updt_usr, refresh_int); // Thread
};

function createTree(ep_name) {
	// jsTree config
	var tconfig = {
		"plugins" : ["json_data", "themes", "ui", "types", "crrm", "hotkeys", "dnd"],
		"json_data" : { "ajax" : { "url" : "/web/json_eps/${user}/" + ep_name } },
		"themes" : {"theme" : "classic", "dots" : true, "icons" : true},
		"types" : {
			"valid_children" : ["suite"],
			"types" : {
				"suite" : {
					"icon" : { 'image' : '/static/img/glyphicons_folder.png' },
					"valid_children": ["default"],
					"max_depth" : 2
				},
				"default" : {
					"icon" : { 'image' : '/static/img/glyphicons_file.png' },
					"max_depth" : 1
				}
			}
		},
		"crrm" : {
			"move" : {
				"check_move" : function (m) {
					if (!can_edit) return false; return true;
				}
			}
		},
		"hotkeys" : {
			"f2" : function () {
				if (!can_edit) return false; this.rename();
			},
			"del" : function () {
				if (!can_edit) return false; this.remove();
			}
		}
	};
	$("#t_" + ep_name).jstree(tconfig)
	.bind("loaded.jstree", function (event, data) {
		data.inst.open_all();
	})
	.bind("select_node.jstree", function (event, data) {
		var file_id = data.rslt.obj.attr("id");
		var obj = document.getElementById(file_id);
		var nodes = [];
		for (var i=0, attrs=obj.attributes, l=attrs.length; i<l; i++){
			name = attrs.item(i).nodeName;
			value = attrs.item(i).value;
			// Ignore tags that are not very interesting
			if (name == "class" || name == "suite" || value == "suite" ||
				value == "jstree-last" || value == "jstree-leaf") continue;
			nodes.push(name + " = " + value);
		}
		$(".project_info").html(nodes.sort().join(" ;<br>"));
	});
};

function createFileTree(ep_name) {
	// jsTree config
	var tconfig = {
		"plugins" : ["json_data", "themes", "ui", "types", "dnd"],
		"initially_open" : ["root"],
		"json_data" : { "ajax" : { "url" : "/web/json_folders/${user}/" } },
		"themes" : { "theme" : "classic", "dots" : true, "icons" : true },
		"types" : {
			"valid_children" : ["folder"],
			"types" : {
				"folder" : {
					"icon" : { 'image' : '/static/img/glyphicons_folder.png' },
					"valid_children": ["default"],
					"max_depth" : 2
				},
				"default" : {
					"icon" : { 'image' : '/static/img/glyphicons_file.png' },
					"max_depth" : 1
				}
			}
		},
	};
	$("#b_" + ep_name).jstree(tconfig);
};

function updateUserLogs(log_name) {
	$.getJSON("/web/json_logs/${user}/" + log_name,
		// Update log on success
		function(html) {
			$("#" + log_name).html(html);
	});
};

// Refresh eps on tab click
$(".refresh_eps").click(function() {
	var ep_name = $(this).find("a").attr("data-target").replace("#", "");
	createTree( ep_name );
	createFileTree( ep_name );
});
// Refresh logs on tab click
$(".refresh_logs").click(function() {
	updateUserLogs( $(this).find("a").attr("data-target").replace("#", "") );
});

function treeSave(elem) {
	can_edit = false;
	var ep_name = $(elem).parent().parent().parent().attr("id");
	var json_repr = $("#t_" + ep_name).jstree("get_json", -1);
	$(".tree_edit").show();
	$("#b_" + ep_name).css('visibility', 'hidden');
	$(".can_edit_tree").remove();
	$.ajax( "/web/json_save_project/${user}/" + ep_name,
			{
				data : JSON.stringify(json_repr),
				contentType : 'application/json',
				type : 'POST'
			} )
		.done(function() {
			$("#" + ep_name).parent().after('<span id="saving_project" style="float:left;position:relative;">' +
				'<br>Project saved.<br>You must START or RESET before you can see the changes.</span>');
			$("#saving_project").fadeToggle(2500, "linear", function() {$("#saving_project").remove()});
		})
		.fail(function() {
			$("#" + ep_name).parent().after('<span id="saving_project" style="float:left;position:relative;">' +
				'<br>Project cannot be saved !</span>');
			$("#saving_project").fadeToggle(2500, "linear", function() {$("#saving_project").remove()});
		});
};
function treeCancel(elem) {
	can_edit = false;
	var ep_name = $(elem).parent().parent().parent().attr("id");
	$(".tree_edit").show();
	$("#b_" + ep_name).css('visibility', 'hidden');
	$(".can_edit_tree").remove();
	// Restore all tree, before it was changed
	$("#t_" + ep_name).jstree("refresh");
};

function treeCreate(elem) {
	var ep_name = $(elem).parent().parent().parent().attr("id");
	$("#t_" + ep_name).jstree("create", "last");
};
function treeRemove(elem) {
	var ep_name = $(elem).parent().parent().parent().attr("id");
	$("#t_" + ep_name).jstree("remove");
};

// Run this on page load
$(function () {
	// Show tab from hash link
	var activeTab = $('[href="' + location.hash + '"]');
	activeTab && activeTab.tab('show');
	// On pill shown, change window location
	$(".nav-pills a").on("shown", function (e) {window.location.hash = e.target.hash});
	// Updating user stats
	updateUserStats();
	// Update first EP
	$(".refresh_eps.active").click();
	// Update first user log
	$(".refresh_logs.active").click();

	// Toggle edit mode
	$(".tree_edit").click(function () {
		can_edit = !can_edit;
		var ep_name = $(this).parent().parent().attr("id");
		if (can_edit) {
			$(".tree_edit").hide();
			$("#b_" + ep_name).css('visibility', 'visible');
			$(this).after('<span class="can_edit_tree">&nbsp;&nbsp;&nbsp;<b>Edit ... </b>&nbsp;&nbsp;' +
				'<a onclick="treeSave(this)" style="cursor:pointer" title="Save"><i class="icon-ok"></i></a>&nbsp;&nbsp;' +
				'<a onclick="treeCancel(this)" style="cursor:pointer" title="Cancel"><i class="icon-remove"></i></a> | ' +
				'<a onclick="treeCreate(this)" style="cursor:pointer"><i class="icon-folder-open" title="Create suite"></i></a>&nbsp;&nbsp;' +
				'<a onclick="treeRemove(this)" style="cursor:pointer"><i class="icon-trash" title="Remove suite"></i></a>&nbsp;&nbsp;' +
				'</span>');
		}
		else {
			$(".tree_edit").show();
			$("#b_" + ep_name).css('visibility', 'hidden');
			$(".can_edit_tree").remove();
		}
	});
});
</script>

</body>
</html>
